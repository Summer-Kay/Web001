import org.w3c.dom.*;
import javax.xml.parsers.*;
import java.io.*;
import java.util.*;
import org.xml.sax.SAXException;

public class XmlComparator {

    private static List<String> differences = new ArrayList<>();

    public static void main(String[] args) throws Exception {
        if (args.length < 2) {
            System.out.println("用法: java XmlComparator file1.xml file2.xml");
            return;
        }

        File file1 = new File(args[0]);
        File file2 = new File(args[1]);

        Document doc1 = parseXml(file1);
        Document doc2 = parseXml(file2);

        compareNodes(doc1.getDocumentElement(), doc2.getDocumentElement(), "/");

        generateHtmlReport("report.html");
        System.out.println("比较完成，结果已保存到 report.html");
    }

    // 解析 XML
    private static Document parseXml(File file) throws ParserConfigurationException, IOException, SAXException {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setIgnoringComments(true);
        factory.setNamespaceAware(true);
        factory.setIgnoringElementContentWhitespace(true);
        DocumentBuilder builder = factory.newDocumentBuilder();
        return builder.parse(file);
    }

    // 比较两个节点
    private static void compareNodes(Node n1, Node n2, String path) {
        if (n1 == null && n2 == null) return;

        if (n1 == null || n2 == null) {
            differences.add(path + " 节点存在于一个文件但不存在于另一个文件");
            return;
        }

        if (!n1.getNodeName().equals(n2.getNodeName())) {
            differences.add(path + " 节点名不同: " + n1.getNodeName() + " vs " + n2.getNodeName());
        }

        // 比较属性
        NamedNodeMap attrs1 = n1.getAttributes();
        NamedNodeMap attrs2 = n2.getAttributes();
        if (attrs1 != null && attrs2 != null) {
            for (int i = 0; i < attrs1.getLength(); i++) {
                Node a1 = attrs1.item(i);
                Node a2 = attrs2.getNamedItem(a1.getNodeName());
                if (a2 == null) {
                    differences.add(path + "/" + n1.getNodeName() + " 缺少属性 " + a1.getNodeName());
                } else if (!a1.getNodeValue().equals(a2.getNodeValue())) {
                    differences.add(path + "/" + n1.getNodeName() + " 属性 " + a1.getNodeName() + " 不同: " + a1.getNodeValue() + " vs " + a2.getNodeValue());
                }
            }
            for (int i = 0; i < attrs2.getLength(); i++) {
                Node a2 = attrs2.item(i);
                Node a1 = attrs1.getNamedItem(a2.getNodeName());
                if (a1 == null) {
                    differences.add(path + "/" + n2.getNodeName() + " 多余属性 " + a2.getNodeName());
                }
            }
        }

        // 比较文本内容
        String v1 = n1.getTextContent().trim();
        String v2 = n2.getTextContent().trim();
        if (n1.getChildNodes().getLength() == 1 && n2.getChildNodes().getLength() == 1) {
            if (!v1.equals(v2)) {
                differences.add(path + "/" + n1.getNodeName() + " 值不同: " + v1 + " vs " + v2);
            }
        }

        // 比较子节点
        NodeList children1 = n1.getChildNodes();
        NodeList children2 = n2.getChildNodes();

        int len = Math.max(children1.getLength(), children2.getLength());
        for (int i = 0; i < len; i++) {
            Node c1 = i < children1.getLength() ? children1.item(i) : null;
            Node c2 = i < children2.getLength() ? children2.item(i) : null;

            if (c1 != null && c1.getNodeType() == Node.TEXT_NODE && c1.getTextContent().trim().isEmpty()) continue;
            if (c2 != null && c2.getNodeType() == Node.TEXT_NODE && c2.getTextContent().trim().isEmpty()) continue;

            compareNodes(c1, c2, path + "/" + (c1 != null ? c1.getNodeName() : (c2 != null ? c2.getNodeName() : "")));
        }
    }

    // 生成 HTML 报告
    private static void generateHtmlReport(String fileName) throws IOException {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(fileName))) {
            writer.write("<html><head><meta charset='UTF-8'><title>XML 比较报告</title></head><body>");
            writer.write("<h2>XML 文件比较结果</h2>");
            if (differences.isEmpty()) {
                writer.write("<p style='color:green;'>两个文件完全一致</p>");
            } else {
                writer.write("<ul>");
                for (String diff : differences) {
                    writer.write("<li style='color:red;'>" + diff + "</li>");
                }
                writer.write("</ul>");
            }
            writer.write("</body></html>");
        }
    }
}
